services:
  mq:
    image: rabbitmq:3-management-alpine
    container_name: llm-twin-mq
    ports:
      - "5673:5672"
      - "15673:15672"
    volumes:
      - ./rabbitmq/data/:/var/lib/rabbitmq/
      - ./rabbitmq/log/:/var/log/rabbitmq
    restart: always

  qdrant:
    image: qdrant/qdrant:latest
    container_name: llm-twin-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    expose:
      - "6333"
      - "6334"
      - "6335"
    volumes:
      - qdrant-data:/qdrant_data
    restart: always

  postgres:
    image: postgres:15
    container_name: llm-twin-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "54322:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  data-crawlers:
    image: "llm-twin-data-crawlers"
    container_name: llm-twin-data-crawlers
    platform: "linux/amd64"
    build:
      context: .
      dockerfile: .docker/Dockerfile.data_crawlers
    env_file:
      - .env
    ports:
      - "9010:8080"
    depends_on:
      - postgres

  data_cdc:
    image: "llm-twin-data-cdc"
    container_name: llm-twin-data-cdc
    build:
      context: .
      dockerfile: .docker/Dockerfile.data_cdc
    env_file:
      - .env
    depends_on:
      - postgres
      - mq

  feature_pipeline:
    image: "llm-twin-feature-pipeline"
    container_name: llm-twin-feature-pipeline
    build:
      context: .
      dockerfile: .docker/Dockerfile.feature_pipeline
    environment:
      BYTEWAX_PYTHON_FILE_PATH: "main:flow"
      DEBUG: "false"
      BYTEWAX_KEEP_CONTAINER_ALIVE: "true"
    env_file:
      - .env
    depends_on:
      - mq
      - qdrant
    restart: always

volumes:
  qdrant-data:
  postgres-data:

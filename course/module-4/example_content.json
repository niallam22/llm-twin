[
  {
    "instruction": "Write a post presenting a list of essential ML monitoring metrics, aiming to educate followers on effective monitoring practices.",
    "content": "I compiled a list of the top 10 metrics your ML monitoring system should track.\n.\n#𝟏 𝐎𝐩𝐞𝐫𝐚𝐭𝐢𝐨𝐧𝐚𝐥 𝐦𝐞𝐭𝐫𝐢𝐜𝐬\nUsed to monitor the health of your overall software system.\n➝ latency\n➝ throughput\n➝ CPU/GPU utilization\n➝ memory utilization\n➝ the number of requests your model receives in the last X minutes/hours/days\n➝ the number of successful requests\n#𝟐 𝐌𝐋-𝐬𝐩𝐞𝐜𝐢𝐟𝐢𝐜 𝐦𝐞𝐭𝐫𝐢𝐜𝐬\nUsed to monitor the performance of your ML system.\n➝ accuracy (extremely useful when you have feedback or natural labels from the user: click rate, upvote, downvote, purchases, bookmarks, views, etc.)\n➝ predictions (as predictions are low dimensional various statistics are easy to compute + the distribution of the prediction represents a proxy for the input distribution)\n➝ features (feature validation + two-sample tests for drift detection)\n➝ raw inputs (these are harder to monitor due to their scattered nature within the infrastructure)\n-----\n💡 My goal is to make\nhashtag\n#\nml\neasy and intuitive. Follow me for daily insights about\nhashtag\n#\ndata\n,\nhashtag\n#\nml\n, and\nhashtag\n#\nmlops\n."
  },
  {
    "instruction": "Explain the benefits of using the walrus operator in Python for writing cleaner code.",
    "content": "Here is some 𝗣𝘆𝘁𝗵𝗼𝗻 𝘀𝘆𝗻𝘁𝗮𝘅 𝘀𝘂𝗴𝗮𝗿 that will help you 𝘄𝗿𝗶𝘁𝗲 𝗰𝗹𝗲𝗮𝗻𝗲𝗿 𝗰𝗼𝗱𝗲 ↓ \n\nI am talking about the 𝘸𝘢𝘭𝘳𝘶𝘴 𝘰𝘱𝘦𝘳𝘢𝘵𝘰𝘳 denoted by the `:=` symbol. \n\nIt was introduced in Python 3.8, but I rarely see it used. \n\nThus, as a \"clean code\" freak, I wanted to dedicate a post to it. \n\n𝗪𝗵𝗮𝘁 𝗱𝗼𝗲𝘀 𝘁𝗵𝗲 𝘄𝗮𝗹𝗿𝘂𝘀 𝗼𝗽𝗲𝗿𝗮𝘁𝗼𝗿 𝗱𝗼? \n\nIt's an assignment expression that allows you to assign and return a value in the same expression. \n\n𝗪𝗵𝘆 𝘀𝗵𝗼𝘂𝗹𝗱 𝘆𝗼𝘂 𝘂𝘀𝗲 𝗶𝘁? \n\n𝘊𝘰𝘯𝘤𝘪𝘴𝘦𝘯𝘦𝘴𝘴: It reduces the number of lines needed for variable assignment and checking, making code more concise. \n\n𝘙𝘦𝘢𝘥𝘢𝘣𝘪𝘭𝘪𝘵𝘺: It can enhance readability by keeping related logic close, although this depends on the context and the reader's familiarity with exotic Python syntax. \n\n𝙃𝙚𝙧𝙚 𝙖𝙧𝙚 𝙨𝙤𝙢𝙚 𝙚𝙭𝙖𝙢𝙥𝙡𝙚𝙨 \n\n↓↓↓ \n\n1. Using the walrus operator, you can directly assign the result of the 𝘭𝘦𝘯() function inside an if statement. \n\n2. Avoid calling the same function twice in a while loop. The benefit is less code and makes everything more readable. \n\n3. Another use case arises in list comprehensions where a value computed in a filtering condition is also needed in the expression body. Before the 𝘸𝘢𝘭𝘳𝘶𝘴 𝘰𝘱𝘦𝘳𝘢𝘵𝘰𝘳, if you had to apply a function to an item from a list and filter it based on some criteria, you had to refactor it to a standard for loop. \n\n. \n\nWhen writing clean code, the detail matters. \n\nThe details make the difference between a codebase that can be read like a book or one with 10 WTFs / seconds. \n\n. \n\nWhat do you think? Does the walrus operator make the Python code more readable and concise? \n\nhashtag\n#machinelearning \nhashtag\n#mlops \nhashtag\n#datascience \n"
  }
]
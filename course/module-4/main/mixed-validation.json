[
    {
        "instruction": "Post a LinkedIn update reflecting on the inherent challenges in programming, with a special emphasis on the complexities encountered in AI. Use the hashtags #machinelearning, #artificialintelligence, and #mlops to engage with relevant communities.",
        "post": "The saddest truth about programming.\nEven amplified if you work in AI.\nhashtag\n#\nmachinelearning\nhashtag\n#\nartificialintelliegence\nhashtag\n#\nmlops"
    },
    {
        "instruction": "Announce the completion of the \"Full Stack 7-Steps MLOps Framework\" series on LinkedIn, offering a comprehensive guide on designing, implementing, and deploying ML systems with MLOps best practices. Invite followers to access the course and share their projects.",
        "post": "After 3 months of hard work and no sleep...\nI can finally say that I know everything about MLOps.\nHehe, not really, but I have put in a lot of work and...\nI finally finished my hands-on \"Full Stack 7-Steps MLOps Framework\" series.\nThis a step-by-step course that will explain to you how to design, implement, and deploy an ML system using MLOps good practices.\nAt the end of the 7 lessons course, you will know how to:\n- design a batch-serving architecture\n- use Hopsworks as a feature store\n- design a feature engineering pipeline that reads data from an API\n- build a training pipeline with hyper-parameter tunning\n- use W&B as an ML Platform to track your experiments, models, and metadata\n- implement a batch prediction pipeline\n- use Poetry to build your own Python packages\n- deploy your own private PyPi server\n- orchestrate everything with Airflow\n- use the predictions to code a web app using FastAPI and Streamlit\n- use Docker to containerize your code\n- use Great Expectations to ensure data validation and integrity\n- monitor the performance of the predictions over time\n- deploy everything to GCP\n- build a CI/CD pipeline using GitHub Actions\nIf this sounds interesting to you.\nI want you to know that...\nThe course is free and published on Medium under the\nTowards Data Science\npublication so that anybody can level up their ML engineering journey.\nWant to start building your project?\nJust check out the GitHub repository and the first lesson of the series in the comments.\nhashtag\n#\nmachinelearning\nhashtag\n#\ndata\nhashtag\n#\nlearning\n-----\nI want to thank @Kurtis Pykes for helping me build this series and being an excellent copilot. It was a great collaboration."
    },
    {
        "instruction": "On LinkedIn, stress the critical nature of validating data at every stage in the ML model lifecycle. Share a detailed post with an image illustrating the concept and use hashtags #data, #machinelearning, and #mlops.",
        "post": "A wise man said: \ud835\ude03\ud835\uddee\ud835\uddf9\ud835\uddf6\ud835\uddf1\ud835\uddee\ud835\ude01\ud835\uddf2 \ud835\uddf2\ud835\ude03\ud835\uddf2\ud835\uddff\ud835\ude06\ud835\ude01\ud835\uddf5\ud835\uddf6\ud835\uddfb\ud835\uddf4!\n100% you heard that data validation is good...\nbut where should we validate the data? Everywhere!\nThat might be an overstatement, but let me explain.\nWhen the outputs of an ML model are poor, there are 1000+ reasons why that happened.\nBut even if you know that the issue is data related...\nNarrowing down to the actual function that messed up everything is extremely hard.\nThus, by adding data validation before & after:\n- the ingestion ETL;\n- the data engineering pipeline;\n- the feature engineering pipeline;\nyou might add some redundancy, but this will make scanning for errors extremely easy.\n.\nImagine that you would have a data validation check only after the FE pipeline. If that fails, you know it failed \ud835\ude23\ud835\ude36\ud835\ude35 \ud835\ude25\ud835\ude30\ud835\ude2f'\ud835\ude35 \ud835\ude2c\ud835\ude2f\ud835\ude30\ud835\ude38 \ud835\ude38\ud835\ude29\ud835\ude26\ud835\ude33\ud835\ude26 \ud835\ude2a\ud835\ude35 \ud835\ude27\ud835\ude22\ud835\ude2a\ud835\ude2d\ud835\ude26\ud835\ude25.\nIf the system is small, that is not an issue, but imagine you have 100+ transformations spread across multiple teams...\n\ud83e\udd72 Finding the right error might take you hours or even days.\n\ud83d\udc9b By adding multiple data validation points in your system, you can quickly answer to: \"where the system failed\".\nThus, by adding data validation in multiple, you automatically slice the pipeline making it easy to diagnose.\n.\nNote that this is just an example. Your data infrastructure might look different.\nBut the fundamental idea remains the same. Add data validation in all the essential points of your data pipelines to quickly slice and dice the upcoming errors.\nIf you want a hands-on example about using GE to validate your data, check out my article \ud835\ude0c\ud835\ude2f\ud835\ude34\ud835\ude36\ud835\ude33\ud835\ude2a\ud835\ude2f\ud835\ude28 \ud835\ude1b\ud835\ude33\ud835\ude36\ud835\ude34\ud835\ude35\ud835\ude38\ud835\ude30\ud835\ude33\ud835\ude35\ud835\ude29\ud835\ude3a \ud835\ude14\ud835\ude13 \ud835\ude1a\ud835\ude3a\ud835\ude34\ud835\ude35\ud835\ude26\ud835\ude2e\ud835\ude34 \ud835\ude1e\ud835\ude2a\ud835\ude35\ud835\ude29 \ud835\ude0b\ud835\ude22\ud835\ude35\ud835\ude22 \ud835\ude1d\ud835\ude22\ud835\ude2d\ud835\ude2a\ud835\ude25\ud835\ude22\ud835\ude35\ud835\ude2a\ud835\ude30\ud835\ude2f \ud835\ude22\ud835\ude2f\ud835\ude25 \ud835\ude19\ud835\ude26\ud835\ude22\ud835\ude2d-\ud835\ude1b\ud835\ude2a\ud835\ude2e\ud835\ude26 \ud835\ude14\ud835\ude30\ud835\ude2f\ud835\ude2a\ud835\ude35\ud835\ude30\ud835\ude33\ud835\ude2a\ud835\ude2f\ud835\ude28. Link in the comments \ud83d\udc47\nhashtag\n#\ndata\nhashtag\n#\nmachinelearning\nhashtag\n#\nmlops\n-----\n\ud83d\udca1 Follow me if you want to level up in designing and productionizing ML systems."
    },
    {
        "instruction": "On LinkedIn, emphasize the critical practice of versioning data in MLOps for managing changes in model embeddings and data processes. Discuss the types of changes and the importance of data versioning for clarity and system integrity.",
        "post": "This is one MLOps practice you 100% have to know.\nMany engineers ignore it,\nbut let me explain why it is so important.\nI showed you one post before about how to extract an embedding from your model.\nI showed you a few examples of extraction methods for various models.\nBut what happens if you want to change the extraction method or model to compare the performance?\nMost probably, it will soon become a mess.\nWe all encountered situations such as: \"final_model,\" \"best_final_model,\" \"best_final_final_model,\" etc. You get the idea... It is tough to keep track of our changes.\n.\n3 types of changes can occur when extracting embeddings:\n#\ud835\udfcf. \ud835\udc02\ud835\udc21\ud835\udc1a\ud835\udc27\ud835\udc20\ud835\udc1e \ud835\udc32\ud835\udc28\ud835\udc2e\ud835\udc2b \ud835\udc26\ud835\udc28\ud835\udc1d\ud835\udc1e\ud835\udc25 \ud835\udc1a\ud835\udc2b\ud835\udc1c\ud835\udc21\ud835\udc22\ud835\udc2d\ud835\udc1e\ud835\udc1c\ud835\udc2d\ud835\udc2e\ud835\udc2b\ud835\udc1e\nThis is considered a major change: O.x.x\nChanging your model architecture might change the semantics of the embeddings and their dimensionality. Also, as a by-product, it changes your extraction method, and you must retrain your model.\n#\ud835\udfd0. \ud835\udc02\ud835\udc21\ud835\udc1a\ud835\udc27\ud835\udc20\ud835\udc1e \ud835\udc32\ud835\udc28\ud835\udc2e\ud835\udc2b \ud835\udc1e\ud835\udc31\ud835\udc2d\ud835\udc2b\ud835\udc1a\ud835\udc1c\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27 \ud835\udc2d\ud835\udc32\ud835\udc29\ud835\udc1e\nThis is considered a minor change: x.O.x\nAgain this might result in changes in your semantics or dimensionality, but you don't have to retrain your model.\n#\ud835\udfd1. \ud835\udc11\ud835\udc1e\ud835\udc2d\ud835\udc2b\ud835\udc1a\ud835\udc22\ud835\udc27 \ud835\udc32\ud835\udc28\ud835\udc2e\ud835\udc2b \ud835\udc26\ud835\udc28\ud835\udc1d\ud835\udc1e\ud835\udc25\nThis is considered a patch version change: x.x.O\nThis won't change your embedding structure, but by retraining, they won't be compatible with your old set of embeddings as the vector space might change.\n.\nAs you see, your embeddings will change quite often, that is why you need to...\nVersion your data!\nData versioning is one key aspect of a clean ML system.\nEvery change will result in a new data version. Then, when you use a specific set of embeddings, you will know exactly how they were computed.\nYou can easily version your data directly in the feature store for structured data. You can quickly add data versioning for unstructured data using tools such as S3 + DVC/your custom software.\nTo conclude...\nYou should fire up a new version of your data whenever you change your data process.\nHow are you versioning your data?\nhashtag\n#\ndata\nhashtag\n#\nmachinelearning\nhashtag\n#\nmlops\n-----\n\ud83d\udca1 My goal is to help machine learning engineers level up in designing and productionizing ML systems.\n\ud83d\udc49 Follow me for weekly insights."
    },
    {
        "instruction": "Reveal three lesser-known methods for data transformation using a feature store in ML production systems on LinkedIn. Discuss the trade-offs and benefits of each method, inviting feedback from your network.",
        "post": "These are 3 ways you didn't know about how you can transform your data when using a feature store.\nA feature store helps you quickly solve the training serving skew issue by offering you a consistent way to transform your data into features between the training and inference pipelines.\nThe issue boils down to WHEN you do the transformation.\nWhen using a feature store, there are 3 main ways how you can transform your data:\n\ud835\udfcf. \ud835\udc01\ud835\udc1e\ud835\udc1f\ud835\udc28\ud835\udc2b\ud835\udc1e \ud835\udc2c\ud835\udc2d\ud835\udc28\ud835\udc2b\ud835\udc22\ud835\udc27\ud835\udc20 \ud835\udc2d\ud835\udc21\ud835\udc1e \ud835\udc1d\ud835\udc1a\ud835\udc2d\ud835\udc1a \ud835\udc22\ud835\udc27 \ud835\udc2d\ud835\udc21\ud835\udc1e \ud835\udc1f\ud835\udc1e\ud835\udc1a\ud835\udc2d\ud835\udc2e\ud835\udc2b\ud835\udc1e \ud835\udc2c\ud835\udc2d\ud835\udc28\ud835\udc2b\ud835\udc1e\nIn the feature engineering pipeline, you do everything: clean, validate, aggregate, reduce, and transform your data.\nEven if this is the most intuitive way of doing things, it is the worse.\n\ud83d\udfe2 ultra-low latency\n\ud83d\udd34 hard to do EDA on transformed data\n\ud83d\udd34 store duplicated/redundant data\n\ud835\udfd0. \ud835\udc12\ud835\udc2d\ud835\udc28\ud835\udc2b\ud835\udc1e \ud835\udc2d\ud835\udc21\ud835\udc1e \ud835\udc2d\ud835\udc2b\ud835\udc1a\ud835\udc27\ud835\udc2c\ud835\udc1f\ud835\udc28\ud835\udc2b\ud835\udc26\ud835\udc1a\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27 \ud835\udc22\ud835\udc27 \ud835\udc32\ud835\udc28\ud835\udc2e\ud835\udc2b \ud835\udc29\ud835\udc22\ud835\udc29\ud835\udc1e\ud835\udc25\ud835\udc22\ud835\udc27\ud835\udc1e \ud835\udc28\ud835\udc2b \ud835\udc26\ud835\udc28\ud835\udc1d\ud835\udc1e\ud835\udc25 \ud835\udc29\ud835\udc2b\ud835\udc1e-\ud835\udc29\ud835\udc2b\ud835\udc28\ud835\udc1c\ud835\udc1e\ud835\udc2c\ud835\udc2c\ud835\udc22\ud835\udc27\ud835\udc20 \ud835\udc25\ud835\udc1a\ud835\udc32\ud835\udc1e\ud835\udc2b\ud835\udc2c\nIn the feature engineering pipeline, you perform only the cleaning, validation, aggregations, and reductions steps.\nLater, by incorporating all your transformations into your pipeline object or pre-processing layers, you automatically save them along your model.\nThus, you can input your cleaned data into your pipeline, and it will know how to handle it.\n\ud83d\udfe2 store only cleaned data\n\ud83d\udfe2 easily explore your data\n\ud83d\udd34 the transformations are done on the client\n\ud835\udfd1. \ud835\udc18\ud835\udc28\ud835\udc2e \ud835\udc1a\ud835\udc2d\ud835\udc2d\ud835\udc1a\ud835\udc1c\ud835\udc21 \ud835\udc2d\ud835\udc28 \ud835\udc1e\ud835\udc2f\ud835\udc1e\ud835\udc2b\ud835\udc32 \ud835\udc1c\ud835\udc25\ud835\udc1e\ud835\udc1a\ud835\udc27\ud835\udc1e\ud835\udc1d \ud835\udc1d\ud835\udc1a\ud835\udc2d\ud835\udc1a \ud835\udc2c\ud835\udc28\ud835\udc2e\ud835\udc2b\ud835\udc1c\ud835\udc1e \ud835\udc1a \ud835\udc14\ud835\udc03\ud835\udc05 \ud835\udc2d\ud835\udc2b\ud835\udc1a\ud835\udc27\ud835\udc2c\ud835\udc1f\ud835\udc28\ud835\udc2b\ud835\udc26\ud835\udc1a\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27\nThis is similar to solution 2., but instead of attaching the transformation directly to your model, you attached them as a UDF to the feature store.\nfeature = cleaned data source + UDF\nSo when you request a feature, the feature store will automatically trigger the UDF on a server and return it.\n\ud83d\udfe2 store only cleaned data\n\ud83d\udfe2 easily explore your data\n\ud83d\udfe2 the transformations are done on the server\n\ud83d\udfe2 scalable (using Spark)\n\ud83d\udd34 hard to implement\nAs a recap,\nThere are 3 ways when you can perform your transformations to solve the train serving skew when using a feature store.\nWhat method do you think is the best?\nhashtag\n#\ndata\nhashtag\n#\nmachinelearning\nhashtag\n#\nmlops\n-----\nI just started my ML engineering weekly newsletter.\nSubscribe to level up in building ML systems:\nhttps://lnkd.in/dsMR4ivA"
    },
    {
        "instruction": "Author a technical post exploring the application of reinforcement learning in universal trading for order execution. Discuss the concept of oracle policy distillation and its effectiveness in optimizing trading strategies. This post should cater to a readership interested in the intersection of ML and finance, providing insights into advanced ML techniques for improving order execution in trading.",
        "post": "Universal Trading for Order Execution with Reinforcement Learning | by Paul Iusztin | MLearning.ai | MediumOpen in appSign upSign inWriteSign upSign inMastodonMember-only storyUniversal Trading for Order Execution with Reinforcement LearningUniversal Trading for Order Execution with Oracle Policy DistillationPaul Iusztin\u00b7FollowPublished inMLearning.ai\u00b76 min read\u00b7Jan 18, 2022662ListenSharePhoto by Markus Winkler on UnsplashAs long-term investors we all like hodling different assets: stocks, cryptocurrency, etc. In most cases, we are not concerned about short-term price fluctuations. That statement is true, but deep inside of us, we all like to get in at the best price entry for our periodical investments without knowing any technical analysis. If we do that, with the magic of compounding, our gains would be a lot better over long periods.The goal of this paper is to implement a Deep Reinforcement Agent that knows when is the best moment to buy or sell an asset from your portfolio. This is a summary of the paper Universal Trading for Order Execution with Oracle Policy Distillation written at Microsoft Research.What is Order Execution?Order Execution is the ability to buy an asset with a given amount of cash at the best price and with minimal impact on the market. The same applies. selling a specific asset. It is different than trading because you don\u2019t buy or sell often. In an order execution setup you buy for the long term, but at the best moment given a period of time. You just make changes to your portfolio. For example today we want to buy 600 shares of Apple to hold them long-term. How do we buy them? Do we buy them randomly?sourceWhat Data Do We Need?The paper uses a time horizon of one day. That means that on a specific day the agent has to buy/sell X units of an asset.Two types of variables are defined:Public Variables: a time series of prices & volumes of an asset within a day.Private Variables: how much time does the agent has left until the end of the day & how many units does it still have to buy or sell.Reinforcement Learning ComponentsAgentCreate an account to read\u00a0the\u00a0full\u00a0story.The\u00a0author made this story available to\u00a0Medium\u00a0members\u00a0only.If you\u2019re new to Medium, create a new account to read this story on us.Continue in appOr, continue in mobile webSign up with GoogleSign up with FacebookSign up with emailAlready have an account? Sign\u00a0in66662FollowWritten by Paul Iusztin1.5K Followers\u00b7Writer for MLearning.ai\ud83e\udd16 Senior ML Engineer | Helping machine learning engineers design and productionize ML systems. | Socials & ML/MLOps Hub: https://www.pauliusztin.me/FollowMore from Paul Iusztin and MLearning.aiPaul IusztininDecoding MLThe LLMs kit: Build a production-ready real-time financial advisor system using streaming\u2026Lesson 1: LLM architecture system design using the 3-pipeline pattern\u00b712 min read\u00b7Jan 5201Fabio MatricardiinMLearning.aiHow I Built a Chatbot that Crushed ChatGPT with Zero Cost AI ToolsChallenge Accepted! How I created a chatbot that surpassed the performance of the famous ChatGPT model using free and open source AI tools\u2026\u00b79 min read\u00b76 days ago1.4K5Maximilian VogelinMLearning.aiThe ChatGPT list of lists: A collection of 3000+ prompts, GPTs, use-cases, tools, APIs, extensions\u2026Updated Jan-11, 2024. Added GPT Store, new resources.11 min read\u00b7Feb 7, 202311.5K141Paul IusztininTowards Data ScienceA Framework for Building a Production-Ready Feature Engineering PipelineLesson 1: Batch Serving. Feature Stores. Feature Engineering Pipelines.\u00b713 min read\u00b7Apr 28, 202376111See all from Paul IusztinSee all from MLearning.aiRecommended from MediumMohammad FaizaninMLearning.aiMLOps: Weights & Biases Experiments TrackingMachine Learning projects have hyperparameters, configurations, datasets, and code versions. It is sometimes hard to keep track of what you\u20263 min read\u00b7Aug 16, 20231141Jos\u00e9 Luis Castro Garc\u00edaDistributed Reinforcement LearningThese last few months, I have been working on deep reinforcement learning (RL), a very active research area of artificial intelligence\u202611 min read\u00b7Jan 2920ListsAI Regulation6 stories\u00b7311 savesNatural Language Processing1179 stories\u00b7656 savesChatGPT21 stories\u00b7454 savesGenerative AI Recommended Reading52 stories\u00b7705 savesAustin StarksinArtificial Intelligence in Plain EnglishReinforcement Learning is Dead. Long Live the Transformer!Large Language Models are more powerful than you imagine8 min read\u00b7Jan 131K26Krystian PietrzakWindPRO\u200a\u2014\u200aMLOps project with MLflow, Docker, AWS and Streamlit [Part 4].Using ML to improve wind forecast at a local windsurfing spot.\u00b79 min read\u00b7Dec 3, 202325Paul IusztininTowards Data ScienceA Framework for Building a Production-Ready Feature Engineering PipelineLesson 1: Batch Serving. Feature Stores. Feature Engineering Pipelines.\u00b713 min read\u00b7Apr 28, 202376111Trading Tech AIBuilding an Algorithmic Trading Strategy using Reinforcement Learning\u00b76 min read\u00b7Oct 1, 20231554See more recommendationsHelpStatusAboutCareersBlogPrivacyTermsText to speechTeams\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo make Medium work, we log user data. By using Medium, you agree to our Privacy Policy, including cookie policy."
    },
    {
        "instruction": "Craft a tutorial post for Medium detailing the final lesson of an eight-part series on creating a production-ready RAG application using LangChain, focusing on LLMOps, prompt monitoring, and serverless deployment with RESTful APIs and Gradio for a real-time financial advisor system",
        "post": "Production-ready RAG LangChain application | Decoding MLOpen in appSign upSign inWriteSign upSign inMastodonMember-only storyThe Hands-On LLMs SeriesPrepare your RAG LangChain application for productionLesson 8: LLMOps. Prompt monitoring. Serverless infrastructure. RESTful API. Gradio.Paul Iusztin\u00b7FollowPublished inDecoding ML\u00b719 min read\u00b7Feb 3208ListenShareImage by DALL-E\u2192 the 8th out of 8 lessons of the Hands-On LLMs free courseBy finishing the Hands-On LLMs free course, you will learn how to use the 3-pipeline architecture & LLMOps good practices to design, build, and deploy a real-time financial advisor powered by LLMs & vector DBs.We will primarily focus on the engineering & MLOps aspects. Thus, by the end of this series, you will know how to build & deploy a real ML system, not some isolated code in Notebooks (we haven\u2019t used any Notebooks at all).More precisely, these are the 3 components you will learn to build:a real-time streaming pipeline (deployed on AWS) that listens to financial news, cleans & embeds the documents, and loads them to a vector DBa fine-tuning pipeline (deployed as a serverless continuous training) that fine-tunes an LLM on financial data using QLoRA, monitors the experiments using an experiment tracker and saves the best model to a model registryan inference pipeline built in LangChain (deployed as a serverless RESTful API) that loads the fine-tuned LLM from the model registry and answers financial questions using RAG (leveraging the vector DB populated with financial news in real-time)High-level architecture of the Hands-On LLMs FREE course [Image by the Author].We will also show you how to integrate various serverless tools, such as:Comet ML: as your ML Platform;Qdrant: as your vector DB;Beam: as your serverless infrastructure.Curios? Check the video below to understand better what you will learn \u2193Create an account to read\u00a0the\u00a0full\u00a0story.The\u00a0author made this story available to\u00a0Medium\u00a0members\u00a0only.If you\u2019re new to Medium, create a new account to read this story on us.Continue in appOr, continue in mobile webSign up with GoogleSign up with FacebookSign up with emailAlready have an account? Sign\u00a0in208208FollowWritten by Paul Iusztin1.5K Followers\u00b7Editor for Decoding ML\ud83e\udd16 Senior ML Engineer | Helping machine learning engineers design and productionize ML systems. | Socials & ML/MLOps Hub: https://www.pauliusztin.me/FollowMore from Paul Iusztin and Decoding MLPaul IusztininDecoding MLThe LLMs kit: Build a production-ready real-time financial advisor system using streaming\u2026Lesson 1: LLM architecture system design using the 3-pipeline pattern\u00b712 min read\u00b7Jan 5201Paul IusztininDecoding MLThe ultimate guide on installing PyTorch with CUDA support in all possible ways\u2192 Using Pip, Conda, Poetry, Docker, or directly on the system\u00b710 min read\u00b7Jan 42231Paul IusztininDecoding MLThis is how you can build & deploy a streaming pipeline to populate a vector DB for real-time RAGLesson 3: Real-time text embeddings. Docker. GitHub Actions CI/CD pipeline. AWS\u00b720 min read\u00b7Jan 111861Paul IusztininTowards Data ScienceA Framework for Building a Production-Ready Feature Engineering PipelineLesson 1: Batch Serving. Feature Stores. Feature Engineering Pipelines.\u00b713 min read\u00b7Apr 28, 202376111See all from Paul IusztinSee all from Decoding MLRecommended from MediumIvan ReznikovinTowards AILangChain 101: Part 3a. Talking to Documents: Load, Split and simple RAG with LCELThis is Part 3 of the Langchain 101 series, where we\u2019ll discuss how to load data, split it, store data, and create simple RAG with LCEL9 min read\u00b75 days ago1051Senthil EinLevel Up CodingUnlocking LLM\u2019s Potential with RAG: A Complete Guide from Basics to Advanced TechniquesUsing OpenAI, Google Gemini Pro, and Open Source Models47 min read\u00b76 days ago6916ListsPredictive Modeling w/ Python20 stories\u00b7891 savesPractical Guides to Machine Learning10 stories\u00b71032 savesNatural Language Processing1179 stories\u00b7656 savesdata science and AI40 stories\u00b767 savesPaul IusztininDecoding MLThe LLMs kit: Build a production-ready real-time financial advisor system using streaming\u2026Lesson 1: LLM architecture system design using the 3-pipeline pattern\u00b712 min read\u00b7Jan 5201Suman DasFine Tune Large Language Model (LLM) on a Custom Dataset with QLoRAThe field of natural language processing has been revolutionized by large language models (LLMs), which showcase advanced capabilities and\u202615 min read\u00b7Jan 253383Guodong (Troy) ZhaoinBootcampHow to improve RAG results in your LLM apps: from basics to advancedImprove your RAG quality and latency in your LLM app13 min read\u00b7Jan 228995Param MehtainUSF-Data ScienceA LangChain chatbot using PDFsTable of j14 min read\u00b7Feb 1306See more recommendationsHelpStatusAboutCareersBlogPrivacyTermsText to speechTeams\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo make Medium work, we log user data. By using Medium, you agree to our Privacy Policy, including cookie policy."
    },
    {
        "instruction": "Compose a comprehensive guide as the fourth lesson in a seven-part MLOps series on Medium platform, detailing the orchestration of ML systems using Airflow. Cover the setup of a private PyPi server for package management and the integration of Airflow for orchestrating various components of ML systems. The post should provide insights on leveraging these tools for effective MLOps practices, targeting an audience with intermediate to advanced knowledge in ML engineering.",
        "post": "Unlocking MLOps using Airflow: A Comprehensive Guide to ML System Orchestration | by Paul Iusztin | Towards Data ScienceOpen in appSign upSign inWriteSign upSign inMastodonMember-only storyTHE FULL STACK 7-STEPS MLOPS FRAMEWORKUnlocking MLOps using Airflow: A Comprehensive Guide to ML System OrchestrationLesson 4: Private PyPi Server. Orchestrate Everything with Airflow.Paul Iusztin\u00b7FollowPublished inTowards Data Science\u00b717 min read\u00b7May 23, 20233432ListenSharePhoto by Hassan Pasha on UnsplashThis tutorial represents lesson 4 out of a 7-lesson course that will walk you step-by-step through how to design, implement, and deploy an ML system using MLOps good practices. During the course, you will build a production-ready model to forecast energy consumption levels for the next 24 hours across multiple consumer types from Denmark.By the end of this course, you will understand all the fundamentals of designing, coding and deploying an ML system using a batch-serving architecture.This course targets mid/advanced machine learning engineers who want to level up their skills by building their own end-to-end projects.Nowadays, certificates are everywhere. Building advanced end-to-end projects that you can later show off is the best way to get recognition as a professional engineer.Table of Contents:Course IntroductionCourse LessonsData SourceLesson 4: Private PyPi Server. Orchestrate Everything with Airflow.Lesson 4: CodeConclusionReferencesCourse IntroductionAt the end of this 7 lessons course, you will know how to:design a batch-serving architectureuse Hopsworks as a feature storedesign a feature engineering pipeline that reads data from an APIbuild a training pipeline with hyper-parameter tunninguse W&B as an ML Platform to track your experiments, models, and metadataimplement a batch prediction pipelineuse Poetry to build your own Python packagesdeploy your own private PyPi serverCreate an account to read\u00a0the\u00a0full\u00a0story.The\u00a0author made this story available to\u00a0Medium\u00a0members\u00a0only.If you\u2019re new to Medium, create a new account to read this story on us.Continue in appOr, continue in mobile webSign up with GoogleSign up with FacebookSign up with emailAlready have an account? Sign\u00a0in3433432FollowWritten by Paul Iusztin1.5K Followers\u00b7Writer for Towards Data Science\ud83e\udd16 Senior ML Engineer | Helping machine learning engineers design and productionize ML systems. | Socials & ML/MLOps Hub: https://www.pauliusztin.me/FollowMore from Paul Iusztin and Towards Data SciencePaul IusztininDecoding MLThe LLMs kit: Build a production-ready real-time financial advisor system using streaming\u2026Lesson 1: LLM architecture system design using the 3-pipeline pattern\u00b712 min read\u00b7Jan 5201Sheila TeoinTowards Data ScienceHow I Won Singapore\u2019s GPT-4 Prompt Engineering CompetitionA deep dive into the strategies I learned for harnessing the power of Large Language Models (LLMs)\u00b723 min read\u00b7Dec 29, 202311.2K125Cristian LeoinTowards Data ScienceThe Math behind Adam OptimizerWhy is Adam the most popular optimizer in Deep Learning? Let\u2019s understand it by diving into its math, and recreating the algorithm.16 min read\u00b7Jan 301.3K9Paul IusztininTowards Data ScienceA Framework for Building a Production-Ready Feature Engineering PipelineLesson 1: Batch Serving. Feature Stores. Feature Engineering Pipelines.\u00b713 min read\u00b7Apr 28, 202376111See all from Paul IusztinSee all from Towards Data ScienceRecommended from MediumPaul IusztininTowards Data ScienceA Framework for Building a Production-Ready Feature Engineering PipelineLesson 1: Batch Serving. Feature Stores. Feature Engineering Pipelines.\u00b713 min read\u00b7Apr 28, 202376111Nicolas PogeantinMLearning.aiBuilding a Scalable MLOps Stack\u200a\u2014\u200a From Data to DeploymentThis article explores the development of a streamlined ML system, showcasing the journey from data to deployment, simplifying complex\u2026\u00b75 min read\u00b7Sep 8, 202354ListsPredictive Modeling w/ Python20 stories\u00b7891 savesPractical Guides to Machine Learning10 stories\u00b71032 savesNatural Language Processing1179 stories\u00b7656 savesThe New Chatbots: ChatGPT, Bard, and Beyond12 stories\u00b7301 savesMoez AliEasily deploy machine learning models from the comfort of your NotebookStreamline your Machine Learning model deployment with Modelbit.com. Seamlessly move from Jupyter notebooks to production-ready REST APIs\u20269 min read\u00b7Sep 8, 20232621Ankush k SingalinILLUMINATIONCrafting Quality Python Projects: A Unique Template for Success \u2014 MLOPS-IAnkush k Singal\u00b716 min read\u00b7Oct 25, 20231692Vinod BhatDevOps for Machine Learning (MLOps)Bridging the gap between data science and operations\u200a\u2014\u200aA deep dive into the world of MLOps, where AI meets DevOps.9 min read\u00b7Sep 23, 20233Deepanshu tyagiMLOps 2024 Roadmap: From Zero to ProIn the rapidly evolving landscape of artificial intelligence and machine learning, the significance of operationalizing machine learning\u20264 min read\u00b7Jan 36034See more recommendationsHelpStatusAboutCareersBlogPrivacyTermsText to speechTeams\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo make Medium work, we log user data. By using Medium, you agree to our Privacy Policy, including cookie policy."
    },
    {
        "instruction": "Craft a post detailing 10 underrated software patterns that ML engineers should be familiar with. Emphasize how these patterns can be applied to developing machine learning systems, improving code maintainability, scalability, and overall software quality. The article should serve as a bridge between software engineering principles and ML system development, providing valuable knowledge to ML engineers keen on adopting best practices in software design.",
        "post": "10 Underrated Software Patterns Every ML Engineer Should Know | by Paul Iusztin | Towards AIOpen in appSign upSign inWriteSign upSign inMastodonMember-only story10 Underrated Software Patterns Every ML Engineer Should KnowHow to apply software engineering good practices when developing machine learning systemsPaul Iusztin\u00b7FollowPublished inTowards AI\u00b710 min read\u00b7Jan 10, 2023951ListenSharePhoto by Marjan Blan | @marjanblan on UnsplashAs an ML engineer, you are still a software engineer specializing in building AI/ML systems. Therefore, you still have to write clean, maintainable, and scalable software.I want to take a software engineering approach in this article when looking at ML applications. What do software engineers love most?\u2026 Design patterns, that's right.Therefore, I researched, compiled, and added examples of 10 design patterns that I found valuable when designing ML applications in Python (but can easily be applied in your language of choice).Note: I excluded well-known patterns used in Python, such as decorators, singletons, and mixins (but I recommend you read about those if you are unfamiliar with them).Creational Patterns:#1. Factory MethodProblem: When you start your new shiny application, you construct objects randomly across your code. But as you expected, it all became a huge mess. Also, your code is invaded by if statements and disjoint interfaces that are a horror to maintain. That\u2019s why you need a better way to build new objects.Solution: Using the factory method pattern, you can refactor all your creational code in a single method. By doing that, you eliminate duplication and force the code to use a single interface. Therefore, you can quickly swap different implementations of the interface through inheritance.ML use-case: From my experience, the factory method pattern is the most useful, common, and powerful SWE good practice I use in my ML projects. It is a simple concept used to construct your models, pipelines, and evaluators in a clean and maintainable way. Using this method, you eliminate duplication by having a centralized way to construct all these resources (we all know how messy the initialization of models can be). Thus based on your configuration file, you easily inject the objects of your choice.#2. Abstract FactoryCreate an account to read\u00a0the\u00a0full\u00a0story.The\u00a0author made this story available to\u00a0Medium\u00a0members\u00a0only.If you\u2019re new to Medium, create a new account to read this story on us.Continue in appOr, continue in mobile webSign up with GoogleSign up with FacebookSign up with emailAlready have an account? Sign\u00a0in95951FollowWritten by Paul Iusztin1.5K Followers\u00b7Writer for Towards AI\ud83e\udd16 Senior ML Engineer | Helping machine learning engineers design and productionize ML systems. | Socials & ML/MLOps Hub: https://www.pauliusztin.me/FollowMore from Paul Iusztin and Towards AIPaul IusztininDecoding MLThe LLMs kit: Build a production-ready real-time financial advisor system using streaming\u2026Lesson 1: LLM architecture system design using the 3-pipeline pattern\u00b712 min read\u00b7Jan 5201Ignacio de GregorioinTowards AIIs Mamba the End of ChatGPT As We Know It?The Great New Question\u00b78 min read\u00b7Jan 116.2K62IVAN ILINinTowards AIAdvanced RAG Techniques: an Illustrated OverviewA comprehensive study of the advanced retrieval augmented generation techniques and algorithms, systemising various approaches. The article\u202619 min read\u00b7Dec 17, 20234.3K27Paul IusztininTowards Data ScienceA Framework for Building a Production-Ready Feature Engineering PipelineLesson 1: Batch Serving. Feature Stores. Feature Engineering Pipelines.\u00b713 min read\u00b7Apr 28, 202376111See all from Paul IusztinSee all from Towards AIRecommended from MediumAmir LavasaniinPython in Plain EnglishDesign Patterns in Python: SingletonThe Unconventional Anti-Pattern6 min read\u00b7Sep 10, 2023191Ankush k SingalinILLUMINATIONCrafting Quality Python Projects: A Unique Template for Success \u2014 MLOPS-IAnkush k Singal\u00b716 min read\u00b7Oct 25, 20231692ListsPredictive Modeling w/ Python20 stories\u00b7891 savesPractical Guides to Machine Learning10 stories\u00b71032 savesNatural Language Processing1179 stories\u00b7656 savesGeneral Coding Knowledge20 stories\u00b7905 savesAserdargunAdvanced OOP in PythonClasses and objects: Class instantiation, self, data attributes, UML, methods, __str__, __repr__72 min read\u00b7Jan 146136Paul IusztininTowards Data ScienceA Framework for Building a Production-Ready Feature Engineering PipelineLesson 1: Batch Serving. Feature Stores. Feature Engineering Pipelines.\u00b713 min read\u00b7Apr 28, 202376111Jacob BennettinLevel Up CodingThe 5 paid subscriptions I actually use in 2024 as a software engineerTools I use that are cheaper than Netflix\u00b75 min read\u00b7Jan 48.2K96Deepanshu tyagiMLOps 2024 Roadmap: From Zero to ProIn the rapidly evolving landscape of artificial intelligence and machine learning, the significance of operationalizing machine learning\u20264 min read\u00b7Jan 36034See more recommendationsHelpStatusAboutCareersBlogPrivacyTermsText to speechTeams\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo make Medium work, we log user data. By using Medium, you agree to our Privacy Policy, including cookie policy."
    },
    {
        "instruction": "Share on LinkedIn insights from Paul Iusztin's series on a 7-step MLOps framework, focusing on the latest installment about model predictions consumption and visualization. Enhance the post with an image to attract more views.",
        "post": "As\nPaul Iusztin\n's series continues to explore a 7-step MLOps framework, a new installment explains how to consume and visualize your model's predictions."
    },
    {
        "instruction": "Write a tutorial post for Medium as the second lesson of a seven-part series on MLOps, focusing on creating effective training pipelines, leveraging ML platforms for project management, and utilizing hyperparameter tuning techniques. This lesson should continue from building a feature engineering pipeline and is designed for mid to advanced ML engineers. Highlight the use of specific ML platforms like Weights & Biases (W&B) for tracking experiments, models, and metadata.",
        "post": "A Guide to Building Effective Training Pipelines for Maximum Results | by Paul Iusztin | Towards Data ScienceOpen in appSign upSign inWriteSign upSign inMastodonMember-only storyTHE FULL STACK 7-STEPS MLOPS FRAMEWORKA Guide to Building Effective Training Pipelines for Maximum ResultsLesson 2: Training Pipelines. ML Platforms. Hyperparameter Tuning.Paul Iusztin\u00b7FollowPublished inTowards Data Science\u00b719 min read\u00b7May 9, 2023182ListenSharePhoto by Hassan Pasha on UnsplashThis tutorial represents lesson 2 out of a 7-lesson course that will walk you step-by-step through how to design, implement, and deploy an ML system using MLOps good practices. During the course, you will build a production-ready model to forecast energy consumption levels for the next 24 hours across multiple consumer types from Denmark.By the end of this course, you will understand all the fundamentals of designing, coding and deploying an ML system using a batch-serving architecture.This course targets mid/advanced machine learning engineers who want to level up their skills by building their own end-to-end projects.Nowadays, certificates are everywhere. Building advanced end-to-end projects that you can later show off is the best way to get recognition as a professional engineer.Table of Contents:Course IntroductionCourse LessonsData SourceLesson 2: Training Pipelines. ML Platforms. Hyperparameter Tuning.Lesson 2: CodeConclusionReferencesCourse IntroductionAt the end of this 7 lessons course, you will know how to:design a batch-serving architectureuse Hopsworks as a feature storedesign a feature engineering pipeline that reads data from an APIbuild a training pipeline with hyper-parameter tunninguse W&B as an ML Platform to track your experiments, models, and metadataimplement a batch prediction pipelineuse Poetry to build your own Python packagesdeploy your own private PyPi serverCreate an account to read\u00a0the\u00a0full\u00a0story.The\u00a0author made this story available to\u00a0Medium\u00a0members\u00a0only.If you\u2019re new to Medium, create a new account to read this story on us.Continue in appOr, continue in mobile webSign up with GoogleSign up with FacebookSign up with emailAlready have an account? Sign\u00a0in182182FollowWritten by Paul Iusztin1.5K Followers\u00b7Writer for Towards Data Science\ud83e\udd16 Senior ML Engineer | Helping machine learning engineers design and productionize ML systems. | Socials & ML/MLOps Hub: https://www.pauliusztin.me/FollowMore from Paul Iusztin and Towards Data SciencePaul IusztininDecoding MLThe LLMs kit: Build a production-ready real-time financial advisor system using streaming\u2026Lesson 1: LLM architecture system design using the 3-pipeline pattern\u00b712 min read\u00b7Jan 5201Sheila TeoinTowards Data ScienceHow I Won Singapore\u2019s GPT-4 Prompt Engineering CompetitionA deep dive into the strategies I learned for harnessing the power of Large Language Models (LLMs)\u00b723 min read\u00b7Dec 29, 202311.2K125Cristian LeoinTowards Data ScienceThe Math behind Adam OptimizerWhy is Adam the most popular optimizer in Deep Learning? Let\u2019s understand it by diving into its math, and recreating the algorithm.16 min read\u00b7Jan 301.3K9Paul IusztininTowards Data ScienceA Framework for Building a Production-Ready Feature Engineering PipelineLesson 1: Batch Serving. Feature Stores. Feature Engineering Pipelines.\u00b713 min read\u00b7Apr 28, 202376111See all from Paul IusztinSee all from Towards Data ScienceRecommended from MediumPaul IusztininTowards Data ScienceA Framework for Building a Production-Ready Feature Engineering PipelineLesson 1: Batch Serving. Feature Stores. Feature Engineering Pipelines.\u00b713 min read\u00b7Apr 28, 202376111Ankush k SingalinILLUMINATIONCrafting Quality Python Projects: A Unique Template for Success \u2014 MLOPS-IAnkush k Singal\u00b716 min read\u00b7Oct 25, 20231692ListsPredictive Modeling w/ Python20 stories\u00b7891 savesPractical Guides to Machine Learning10 stories\u00b71032 savesNatural Language Processing1179 stories\u00b7656 savesThe New Chatbots: ChatGPT, Bard, and Beyond12 stories\u00b7301 savesNicolas PogeantinMLearning.aiBuilding a Scalable MLOps Stack\u200a\u2014\u200a From Data to DeploymentThis article explores the development of a streamlined ML system, showcasing the journey from data to deployment, simplifying complex\u2026\u00b75 min read\u00b7Sep 8, 202354Moez AliEasily deploy machine learning models from the comfort of your NotebookStreamline your Machine Learning model deployment with Modelbit.com. Seamlessly move from Jupyter notebooks to production-ready REST APIs\u20269 min read\u00b7Sep 8, 20232621DatadriftersinDev GeniusDeploy XGBoost to Local Kubernetes Cluster using FastAPI: Movie Recommendation Use CaseEfficient deployment and scaling of Machine Learning models is critical for user experience in many real-world applications.\u00b711 min read\u00b7Oct 20, 2023761Deepanshu tyagiMLOps 2024 Roadmap: From Zero to ProIn the rapidly evolving landscape of artificial intelligence and machine learning, the significance of operationalizing machine learning\u20264 min read\u00b7Jan 36034See more recommendationsHelpStatusAboutCareersBlogPrivacyTermsText to speechTeams\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo make Medium work, we log user data. By using Medium, you agree to our Privacy Policy, including cookie policy."
    },
    {
        "instruction": "Announce the launch of a weekly ML engineering newsletter on LinkedIn, emphasizing the commitment to providing value on ML system design and MLOps. Encourage sign-ups through a link and use relevant hashtags to attract interested readers.",
        "post": "After 3 months of overthinking...\nI finally did it.\nAs I value people's time, and I understand that everybody has their way of reading...\nI want to announce,\nThat I will start my free weekly ML engineering newsletter.\n.\nThe mission of my newsletter will be the same as my LinkedIn content:\n\"To help machine learning engineers level up in designing and productionizing ML systems.\"\nI will do my best to provide the best value for your time.\n.\nIf you never want to miss my weekly insights about ML engineering,\nSubscribe to my free newsletter here:\nhttps://lnkd.in/dsMR4ivA\nhashtag\n#\ndata\nhashtag\n#\nmachinelearning\nhashtag\n#\nmlops"
    },
    {
        "instruction": "Please create a post for Medium containing an in-depth tutorial for the third lesson in a series on MLOps, focusing on designing efficient batch prediction pipelines. Discuss the advantages of using Python, a feature store, and Google Cloud Storage (GCS) for batch processing. Include best practices for packaging Python modules with Poetry. The post should help intermediate to advanced ML engineers understand the components and processes involved in creating scalable batch prediction systems.",
        "post": "Unlock the Secret to Efficient Batch Prediction Pipelines Using Python, a Feature Store and GCS | by Paul Iusztin | Towards Data ScienceOpen in appSign upSign inWriteSign upSign inMastodonMember-only storyTHE FULL STACK 7-STEPS MLOPS FRAMEWORKUnlock the Secret to Efficient Batch Prediction Pipelines Using Python, a Feature Store and GCSLesson 3: Batch Prediction Pipeline. Package Python Modules with PoetryPaul Iusztin\u00b7FollowPublished inTowards Data Science\u00b715 min read\u00b7May 12, 2023931ListenSharePhoto by Hassan Pasha on UnsplashThis tutorial represents lesson 3 out of a 7-lesson course that will walk you step-by-step through how to design, implement, and deploy an ML system using MLOps good practices. During the course, you will build a production-ready model to forecast energy consumption levels for the next 24 hours across multiple consumer types from Denmark.By the end of this course, you will understand all the fundamentals of designing, coding and deploying an ML system using a batch-serving architecture.This course targets mid/advanced machine learning engineers who want to level up their skills by building their own end-to-end projects.Nowadays, certificates are everywhere. Building advanced end-to-end projects that you can later show off is the best way to get recognition as a professional engineer.Table of Contents:Course IntroductionCourse LessonsData SourceLesson 3: Batch Prediction Pipeline. Package Python Modules with Poetry.Lesson 3: CodeConclusionReferencesCourse IntroductionAt the end of this 7 lessons course, you will know how to:design a batch-serving architectureuse Hopsworks as a feature storedesign a feature engineering pipeline that reads data from an APIbuild a training pipeline with hyper-parameter tunninguse W&B as an ML Platform to track your experiments, models, and metadataimplement a batch prediction pipelineuse Poetry to build your own Python packagesdeploy your own\u2026Create an account to read\u00a0the\u00a0full\u00a0story.The\u00a0author made this story available to\u00a0Medium\u00a0members\u00a0only.If you\u2019re new to Medium, create a new account to read this story on us.Continue in appOr, continue in mobile webSign up with GoogleSign up with FacebookSign up with emailAlready have an account? Sign\u00a0in93931FollowWritten by Paul Iusztin1.5K Followers\u00b7Writer for Towards Data Science\ud83e\udd16 Senior ML Engineer | Helping machine learning engineers design and productionize ML systems. | Socials & ML/MLOps Hub: https://www.pauliusztin.me/FollowMore from Paul Iusztin and Towards Data SciencePaul IusztininDecoding MLThe LLMs kit: Build a production-ready real-time financial advisor system using streaming\u2026Lesson 1: LLM architecture system design using the 3-pipeline pattern\u00b712 min read\u00b7Jan 5201Sheila TeoinTowards Data ScienceHow I Won Singapore\u2019s GPT-4 Prompt Engineering CompetitionA deep dive into the strategies I learned for harnessing the power of Large Language Models (LLMs)\u00b723 min read\u00b7Dec 29, 202311.2K125Cristian LeoinTowards Data ScienceThe Math behind Adam OptimizerWhy is Adam the most popular optimizer in Deep Learning? Let\u2019s understand it by diving into its math, and recreating the algorithm.16 min read\u00b7Jan 301.3K9Paul IusztininTowards Data ScienceA Framework for Building a Production-Ready Feature Engineering PipelineLesson 1: Batch Serving. Feature Stores. Feature Engineering Pipelines.\u00b713 min read\u00b7Apr 28, 202376111See all from Paul IusztinSee all from Towards Data ScienceRecommended from MediumPaul IusztininTowards Data ScienceA Framework for Building a Production-Ready Feature Engineering PipelineLesson 1: Batch Serving. Feature Stores. Feature Engineering Pipelines.\u00b713 min read\u00b7Apr 28, 202376111Ankush k SingalinILLUMINATIONCrafting Quality Python Projects: A Unique Template for Success \u2014 MLOPS-IAnkush k Singal\u00b716 min read\u00b7Oct 25, 20231692ListsPredictive Modeling w/ Python20 stories\u00b7891 savesPractical Guides to Machine Learning10 stories\u00b71032 savesNatural Language Processing1179 stories\u00b7656 savesThe New Chatbots: ChatGPT, Bard, and Beyond12 stories\u00b7301 savesDatadriftersinDev GeniusDeploy XGBoost to Local Kubernetes Cluster using FastAPI: Movie Recommendation Use CaseEfficient deployment and scaling of Machine Learning models is critical for user experience in many real-world applications.\u00b711 min read\u00b7Oct 20, 2023761Moez AliEasily deploy machine learning models from the comfort of your NotebookStreamline your Machine Learning model deployment with Modelbit.com. Seamlessly move from Jupyter notebooks to production-ready REST APIs\u20269 min read\u00b7Sep 8, 20232621Marcello DichierainData And BeyondAnomaly Detection Data Pipeline and Dashboard with Mage AI and StreamlitEasy steps to build a data pipeline and dashboard for anomaly detection with Mage AI and Streamlit\u00b78 min read\u00b7Aug 30, 2023235Luis SenaHow to Optimize FastAPI for ML Model ServingIf you do I/O alongside ML model serving, this will definitely make your FastAPI service faster.6 min read\u00b7Sep 14, 202373911See more recommendationsHelpStatusAboutCareersBlogPrivacyTermsText to speechTeams\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo make Medium work, we log user data. By using Medium, you agree to our Privacy Policy, including cookie policy."
    },
    {
        "instruction": "Announce on LinkedIn the upcoming release of comprehensive lessons from The Full Stack 7-Steps MLOps Framework. Encourage engagement by using the hashtags #learning, #machinelearning, and #mlops.",
        "post": "Close to releasing all the lessons from The Full Stack 7-Steps MLOps Framework.\nhashtag\n#\nlearning\nhashtag\n#\nmachinelearning\nhashtag\n#\nmlops"
    },
    {
        "instruction": "Develop a tutorial for the fifth lesson in a series on MLOps posted on Medium, focusing on ensuring the trustworthiness of ML systems through data validation and real-time monitoring. Explain how to use Great Expectations (GE) for validating data quality and integrity, and discuss strategies for continuous monitoring of model performance. This post should cater to ML engineers looking to enhance the reliability and efficiency of their ML systems.",
        "post": "Ensuring Trustworthy ML Systems With Data Validation and Real-Time Monitoring | by Paul Iusztin | Towards Data ScienceOpen in appSign upSign inWriteSign upSign inMastodonMember-only storyTHE FULL STACK 7-STEPS MLOPS FRAMEWORKEnsuring Trustworthy ML Systems With Data Validation and Real-Time MonitoringLesson 5: Data Validation for Quality and Integrity using GE. Model Performance Continuous Monitoring.Paul Iusztin\u00b7FollowPublished inTowards Data Science\u00b712 min read\u00b7Jun 3, 20231271ListenSharePhoto by Hassan Pasha on UnsplashThis tutorial represents lesson 5 out of a 7-lesson course that will walk you step-by-step through how to design, implement, and deploy an ML system using MLOps good practices. During the course, you will build a production-ready model to forecast energy consumption levels for the next 24 hours across multiple consumer types from Denmark.By the end of this course, you will understand all the fundamentals of designing, coding and deploying an ML system using a batch-serving architecture.This course targets mid/advanced machine learning engineers who want to level up their skills by building their own end-to-end projects.Nowadays, certificates are everywhere. Building advanced end-to-end projects that you can later show off is the best way to get recognition as a professional engineer.Table of Contents:Course IntroductionCourse LessonsData SourceLesson 5: Data Validation for Quality and Integrity using GE. Model Performance Continuous Monitoring.Lesson 5: CodeConclusionReferencesCourse IntroductionAt the end of this 7 lessons course, you will know how to:design a batch-serving architectureuse Hopsworks as a feature storedesign a feature engineering pipeline that reads data from an APIbuild a training pipeline with hyper-parameter tunninguse W&B as an ML Platform to track your experiments, models, and metadataimplement a batch prediction pipelineuse Poetry to build your own Python\u2026Create an account to read\u00a0the\u00a0full\u00a0story.The\u00a0author made this story available to\u00a0Medium\u00a0members\u00a0only.If you\u2019re new to Medium, create a new account to read this story on us.Continue in appOr, continue in mobile webSign up with GoogleSign up with FacebookSign up with emailAlready have an account? Sign\u00a0in1271271FollowWritten by Paul Iusztin1.5K Followers\u00b7Writer for Towards Data Science\ud83e\udd16 Senior ML Engineer | Helping machine learning engineers design and productionize ML systems. | Socials & ML/MLOps Hub: https://www.pauliusztin.me/FollowMore from Paul Iusztin and Towards Data SciencePaul IusztininDecoding MLThe LLMs kit: Build a production-ready real-time financial advisor system using streaming\u2026Lesson 1: LLM architecture system design using the 3-pipeline pattern\u00b712 min read\u00b7Jan 5201Sheila TeoinTowards Data ScienceHow I Won Singapore\u2019s GPT-4 Prompt Engineering CompetitionA deep dive into the strategies I learned for harnessing the power of Large Language Models (LLMs)\u00b723 min read\u00b7Dec 29, 202311.2K125Cristian LeoinTowards Data ScienceThe Math behind Adam OptimizerWhy is Adam the most popular optimizer in Deep Learning? Let\u2019s understand it by diving into its math, and recreating the algorithm.16 min read\u00b7Jan 301.3K9Paul IusztininTowards Data ScienceA Framework for Building a Production-Ready Feature Engineering PipelineLesson 1: Batch Serving. Feature Stores. Feature Engineering Pipelines.\u00b713 min read\u00b7Apr 28, 202376111See all from Paul IusztinSee all from Towards Data ScienceRecommended from MediumPaul IusztininTowards Data ScienceA Framework for Building a Production-Ready Feature Engineering PipelineLesson 1: Batch Serving. Feature Stores. Feature Engineering Pipelines.\u00b713 min read\u00b7Apr 28, 202376111Ankush k SingalinILLUMINATIONCrafting Quality Python Projects: A Unique Template for Success \u2014 MLOPS-IAnkush k Singal\u00b716 min read\u00b7Oct 25, 20231692ListsPredictive Modeling w/ Python20 stories\u00b7891 savesPractical Guides to Machine Learning10 stories\u00b71032 savesNatural Language Processing1179 stories\u00b7656 savesThe New Chatbots: ChatGPT, Bard, and Beyond12 stories\u00b7301 savesMoez AliEasily deploy machine learning models from the comfort of your NotebookStreamline your Machine Learning model deployment with Modelbit.com. Seamlessly move from Jupyter notebooks to production-ready REST APIs\u20269 min read\u00b7Sep 8, 20232621Marcello DichierainData And BeyondAnomaly Detection Data Pipeline and Dashboard with Mage AI and StreamlitEasy steps to build a data pipeline and dashboard for anomaly detection with Mage AI and Streamlit\u00b78 min read\u00b7Aug 30, 2023235Deepanshu tyagiMLOps 2024 Roadmap: From Zero to ProIn the rapidly evolving landscape of artificial intelligence and machine learning, the significance of operationalizing machine learning\u20264 min read\u00b7Jan 36034DatadriftersinDev GeniusDeploy XGBoost to Local Kubernetes Cluster using FastAPI: Movie Recommendation Use CaseEfficient deployment and scaling of Machine Learning models is critical for user experience in many real-world applications.\u00b711 min read\u00b7Oct 20, 2023761See more recommendationsHelpStatusAboutCareersBlogPrivacyTermsText to speechTeams\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo make Medium work, we log user data. By using Medium, you agree to our Privacy Policy, including cookie policy."
    },
    {
        "instruction": "Draft a detailed guide for Medium platform as the final lesson in a seven-part MLOps series, concentrating on deploying ML components to Google Cloud Platform (GCP) and building CI/CD pipelines with GitHub Actions. The post should offer a step-by-step approach to utilizing these tools for effective version control, testing, and deployment of ML systems, aimed at ML engineers looking to streamline their MLOps workflows.",
        "post": "Seamless CI/CD Pipelines with GitHub Actions on GCP: Your Tools for Effective MLOps | by Paul Iusztin | Towards Data ScienceOpen in appSign upSign inWriteSign upSign inMastodonMember-only storyTHE FULL STACK 7-STEPS MLOPS FRAMEWORKSeamless CI/CD Pipelines with GitHub Actions on GCP: Your Tools for Effective MLOpsLesson 7: Deploy All the ML Components to GCP. Build a CI/CD Pipeline Using Github Actions.Paul Iusztin\u00b7FollowPublished inTowards Data Science\u00b719 min read\u00b7Jun 15, 2023861ListenSharePhoto by Hassan Pasha on UnsplashThis tutorial represents lesson 7 out of a 7-lesson course that will walk you step-by-step through how to design, implement, and deploy an ML system using MLOps good practices. During the course, you will build a production-ready model to forecast energy consumption levels for the next 24 hours across multiple consumer types from Denmark.By the end of this course, you will understand all the fundamentals of designing, coding and deploying an ML system using a batch-serving architecture.This course targets mid/advanced machine learning engineers who want to level up their skills by building their own end-to-end projects.Nowadays, certificates are everywhere. Building advanced end-to-end projects that you can later show off is the best way to get recognition as a professional engineer.Table of Contents:Course IntroductionCourse LessonsData SourceLesson 7: Deploy All the ML Components to GCP. Build a CI/CD Pipeline Using Github Actions.Lesson 7: CodeConclusionReferencesCourse IntroductionAt the end of this 7 lessons course, you will know how to:design a batch-serving architectureuse Hopsworks as a feature storedesign a feature engineering pipeline that reads data from an APIbuild a training pipeline with hyper-parameter tunninguse W&B as an ML Platform to track your experiments, models, and metadataimplement a batch prediction pipelineuse Poetry to build your own Python packagesCreate an account to read\u00a0the\u00a0full\u00a0story.The\u00a0author made this story available to\u00a0Medium\u00a0members\u00a0only.If you\u2019re new to Medium, create a new account to read this story on us.Continue in appOr, continue in mobile webSign up with GoogleSign up with FacebookSign up with emailAlready have an account? Sign\u00a0in86861FollowWritten by Paul Iusztin1.5K Followers\u00b7Writer for Towards Data Science\ud83e\udd16 Senior ML Engineer | Helping machine learning engineers design and productionize ML systems. | Socials & ML/MLOps Hub: https://www.pauliusztin.me/FollowMore from Paul Iusztin and Towards Data SciencePaul IusztininDecoding MLThe LLMs kit: Build a production-ready real-time financial advisor system using streaming\u2026Lesson 1: LLM architecture system design using the 3-pipeline pattern\u00b712 min read\u00b7Jan 5201Sheila TeoinTowards Data ScienceHow I Won Singapore\u2019s GPT-4 Prompt Engineering CompetitionA deep dive into the strategies I learned for harnessing the power of Large Language Models (LLMs)\u00b723 min read\u00b7Dec 29, 202311.2K125Cristian LeoinTowards Data ScienceThe Math behind Adam OptimizerWhy is Adam the most popular optimizer in Deep Learning? Let\u2019s understand it by diving into its math, and recreating the algorithm.16 min read\u00b7Jan 301.3K9Paul IusztininTowards Data ScienceA Framework for Building a Production-Ready Feature Engineering PipelineLesson 1: Batch Serving. Feature Stores. Feature Engineering Pipelines.\u00b713 min read\u00b7Apr 28, 202376111See all from Paul IusztinSee all from Towards Data ScienceRecommended from MediumPaul IusztininTowards Data ScienceA Framework for Building a Production-Ready Feature Engineering PipelineLesson 1: Batch Serving. Feature Stores. Feature Engineering Pipelines.\u00b713 min read\u00b7Apr 28, 202376111Ankush k SingalinILLUMINATIONCrafting Quality Python Projects: A Unique Template for Success \u2014 MLOPS-IAnkush k Singal\u00b716 min read\u00b7Oct 25, 20231692ListsPredictive Modeling w/ Python20 stories\u00b7891 savesPractical Guides to Machine Learning10 stories\u00b71032 savesNatural Language Processing1179 stories\u00b7656 savesThe New Chatbots: ChatGPT, Bard, and Beyond12 stories\u00b7301 savesDatadriftersinDev GeniusDeploy XGBoost to Local Kubernetes Cluster using FastAPI: Movie Recommendation Use CaseEfficient deployment and scaling of Machine Learning models is critical for user experience in many real-world applications.\u00b711 min read\u00b7Oct 20, 2023761Moez AliEasily deploy machine learning models from the comfort of your NotebookStreamline your Machine Learning model deployment with Modelbit.com. Seamlessly move from Jupyter notebooks to production-ready REST APIs\u20269 min read\u00b7Sep 8, 20232621Mohammad FaizaninMLearning.aiMLOps: Weights & Biases Experiments TrackingMachine Learning projects have hyperparameters, configurations, datasets, and code versions. It is sometimes hard to keep track of what you\u20263 min read\u00b7Aug 16, 20231141Shahrullohon LutfillohonovDeploying Machine Learning Models on Google Cloud Platform: From Development to Production with\u2026Navigating the Journey of Model Deployment and User Interaction for Seamless Machine Learning Experiences10 min read\u00b7Sep 4, 20231551See more recommendationsHelpStatusAboutCareersBlogPrivacyTermsText to speechTeams\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo make Medium work, we log user data. By using Medium, you agree to our Privacy Policy, including cookie policy."
    },
    {
        "instruction": "Highlight the importance of careful data validation and monitoring for maintaining the health of ML models in production on LinkedIn. Share an image summarizing the five main criteria to watch, using relevant hashtags to engage the community.",
        "post": "ML is more than training, evaluating and beating metrics.\nTo keep your model healthy while in production, you must carefully validate and monitor your data.\nThese are the 5 main criteria you have to be careful about.\nhashtag\n#\nml\nhashtag\n#\nmlops\nhashtag\n#\nmonitoring"
    },
    {
        "instruction": "Write a tutorial for the sixth lesson in a series on MLOps on Medium, focusing on the utilization of FastAPI and Streamlit for consuming and visualizing model predictions. Cover the process of dockerizing these applications for better deployment and scalability. The article should provide practical insights into creating interactive ML applications and deploying them efficiently, targeting ML engineers with an intermediate to advanced skill level.",
        "post": "FastAPI and Streamlit: The Python Duo You Must Know About | by Paul Iusztin | Towards Data ScienceOpen in appSign upSign inWriteSign upSign inMastodonMember-only storyTHE FULL STACK 7-STEPS MLOPS FRAMEWORKFastAPI and Streamlit: The Python Duo You Must Know AboutLesson 6: Consume and Visualize your Model's Predictions using FastAPI and Streamlit. Dockerize EverythingPaul Iusztin\u00b7FollowPublished inTowards Data Science\u00b714 min read\u00b7Jun 12, 2023178ListenSharePhoto by Hassan Pasha on UnsplashThis tutorial represents lesson 6 out of a 7-lesson course that will walk you step-by-step through how to design, implement, and deploy an ML system using MLOps good practices. During the course, you will build a production-ready model to forecast energy consumption levels for the next 24 hours across multiple consumer types from Denmark.By the end of this course, you will understand all the fundamentals of designing, coding and deploying an ML system using a batch-serving architecture.This course targets mid/advanced machine learning engineers who want to level up their skills by building their own end-to-end projects.Nowadays, certificates are everywhere. Building advanced end-to-end projects that you can later show off is the best way to get recognition as a professional engineer.Table of Contents:Course IntroductionCourse LessonsData SourceLesson 6: Consume and Visualize your Model\u2019s Predictions using FastAPI and Streamlit. Dockerize Everything.Lesson 6: CodeConclusionReferencesCourse IntroductionAt the end of this 7 lessons course, you will know how to:design a batch-serving architectureuse Hopsworks as a feature storedesign a feature engineering pipeline that reads data from an APIbuild a training pipeline with hyper-parameter tunninguse W&B as an ML Platform to track your experiments, models, and metadataimplement a batch prediction pipelineuse Poetry to build your own Python packagesCreate an account to read\u00a0the\u00a0full\u00a0story.The\u00a0author made this story available to\u00a0Medium\u00a0members\u00a0only.If you\u2019re new to Medium, create a new account to read this story on us.Continue in appOr, continue in mobile webSign up with GoogleSign up with FacebookSign up with emailAlready have an account? Sign\u00a0in178178FollowWritten by Paul Iusztin1.5K Followers\u00b7Writer for Towards Data Science\ud83e\udd16 Senior ML Engineer | Helping machine learning engineers design and productionize ML systems. | Socials & ML/MLOps Hub: https://www.pauliusztin.me/FollowMore from Paul Iusztin and Towards Data SciencePaul IusztininDecoding MLThe LLMs kit: Build a production-ready real-time financial advisor system using streaming\u2026Lesson 1: LLM architecture system design using the 3-pipeline pattern\u00b712 min read\u00b7Jan 5201Sheila TeoinTowards Data ScienceHow I Won Singapore\u2019s GPT-4 Prompt Engineering CompetitionA deep dive into the strategies I learned for harnessing the power of Large Language Models (LLMs)\u00b723 min read\u00b7Dec 29, 202311.2K125Cristian LeoinTowards Data ScienceThe Math behind Adam OptimizerWhy is Adam the most popular optimizer in Deep Learning? Let\u2019s understand it by diving into its math, and recreating the algorithm.16 min read\u00b7Jan 301.3K9Paul IusztininTowards Data ScienceA Framework for Building a Production-Ready Feature Engineering PipelineLesson 1: Batch Serving. Feature Stores. Feature Engineering Pipelines.\u00b713 min read\u00b7Apr 28, 202376111See all from Paul IusztinSee all from Towards Data ScienceRecommended from MediumBragadeesh SundararajanHarmonizing Streamlit and FastAPI: A Comprehensive Guide to Building and Deploying Data-Driven Web\u2026In the realm of web application development, especially in the data science and machine learning domain, choosing the right tools to\u2026\u00b710 min read\u00b7Oct 3, 202320Paul IusztininTowards Data ScienceA Framework for Building a Production-Ready Feature Engineering PipelineLesson 1: Batch Serving. Feature Stores. Feature Engineering Pipelines.\u00b713 min read\u00b7Apr 28, 202376111ListsPredictive Modeling w/ Python20 stories\u00b7891 savesPractical Guides to Machine Learning10 stories\u00b71032 savesNatural Language Processing1179 stories\u00b7656 savesThe New Chatbots: ChatGPT, Bard, and Beyond12 stories\u00b7301 savesAnkush k SingalinILLUMINATIONCrafting Quality Python Projects: A Unique Template for Success \u2014 MLOPS-IAnkush k Singal\u00b716 min read\u00b7Oct 25, 20231692Moez AliEasily deploy machine learning models from the comfort of your NotebookStreamline your Machine Learning model deployment with Modelbit.com. Seamlessly move from Jupyter notebooks to production-ready REST APIs\u20269 min read\u00b7Sep 8, 20232621DatadriftersinDev GeniusDeploy XGBoost to Local Kubernetes Cluster using FastAPI: Movie Recommendation Use CaseEfficient deployment and scaling of Machine Learning models is critical for user experience in many real-world applications.\u00b711 min read\u00b7Oct 20, 2023761Luis SenaHow to Optimize FastAPI for ML Model ServingIf you do I/O alongside ML model serving, this will definitely make your FastAPI service faster.6 min read\u00b7Sep 14, 202373911See more recommendationsHelpStatusAboutCareersBlogPrivacyTermsText to speechTeams\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo make Medium work, we log user data. By using Medium, you agree to our Privacy Policy, including cookie policy."
    },
    {
        "instruction": "Summarize the top three ML monitoring resources discovered after reviewing over 100 articles on LinkedIn. Share links to these resources for followers seeking to deepen their understanding of ML system monitoring.",
        "post": "In the last month, I read 100+ ML monitoring articles.\nI trimmed them for you to 3 key resources:\n1. A series of excellent articles made by\nArize AI\nthat will make you understand what ML monitoring is all about.\nLink:\nhttps://lnkd.in/dDVWRujh\n2. The\nEvidently AI\nBlog, where you can find answers to all your questions regarding ML monitoring.\nLink:\nhttps://lnkd.in/du35hWp2\n3. The monitoring hands-on examples hosted by\nDataTalksClub\nwill teach you how to implement an ML monitoring system.\nLink:\nhttps://lnkd.in/d4ziHhxH\nAfter wasting a lot of time reading other resources...\nUsing these 3 resources is a solid start for learning about monitoring ML systems.\nHave you tried them?\nhashtag\n#\nmachinelearning\nhashtag\n#\ndata\nhashtag\n#\nmonitoring\n-----\n\ud83d\udca1 My goal is to help machine learning engineers level up in designing and productionizing ML systems."
    }
]